{
  "name": "Data Cleansing Workflow",
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "drive",
        "watchFor": "specificFiles",
        "folderToWatch": {
          "__rl": true,
          "value": "GOOGLE_DRIVE_FOLDER_ID",
          "mode": "list",
          "cachedResultName": "Data Source Folder"
        },
        "fileFormats": [
          "text/csv",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
          "application/vnd.ms-excel"
        ]
      },
      "id": "google-drive-trigger",
      "name": "Google Drive Trigger",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "google-drive-oauth",
          "name": "Google Drive OAuth2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        }
      },
      "id": "google-drive-download",
      "name": "Download CSV File",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        460,
        300
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "google-drive-oauth",
          "name": "Google Drive OAuth2"
        }
      }
    },
    {
      "parameters": {
        "operation": "fromFile",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "headerRow": true,
          "delimiter": "autoDetect"
        }
      },
      "id": "read-csv",
      "name": "Parse CSV Data",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "create",
        "title": "={{ 'Cleaned_Data_' + $now.format('yyyy-MM-dd_HH-mm') }}",
        "sheetsUi": {
          "sheetValues": [
            {
              "sheetName": "Raw Data",
              "headerRow": true
            }
          ]
        }
      },
      "id": "create-google-sheet",
      "name": "Create Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        900,
        300
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-oauth",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "={{ $json.spreadsheetId }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Raw Data",
          "mode": "name"
        },
        "columnToMatchOn": "A",
        "options": {
          "locationDefine": "specifyRange",
          "range": "A1"
        }
      },
      "id": "upload-to-sheet",
      "name": "Upload Raw Data",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        1120,
        300
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-oauth",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Data Cleaning Function\nconst items = $input.all();\nconst cleanedItems = [];\n\nfor (const item of items) {\n  const data = item.json;\n  const cleaned = {};\n  \n  // Clean email\n  if (data.email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    cleaned.email = emailRegex.test(data.email.toLowerCase().trim()) ? \n      data.email.toLowerCase().trim() : null;\n  }\n  \n  // Clean and format phone number\n  if (data.phone) {\n    const phoneClean = data.phone.replace(/\\D/g, '');\n    if (phoneClean.length === 10) {\n      cleaned.phone = `(${phoneClean.slice(0,3)}) ${phoneClean.slice(3,6)}-${phoneClean.slice(6)}`;\n    } else if (phoneClean.length === 11 && phoneClean[0] === '1') {\n      cleaned.phone = `(${phoneClean.slice(1,4)}) ${phoneClean.slice(4,7)}-${phoneClean.slice(7)}`;\n    } else {\n      cleaned.phone = data.phone; // Keep original if can't format\n    }\n  }\n  \n  // Clean and standardize name\n  if (data.first_name) {\n    cleaned.first_name = data.first_name.trim()\n      .toLowerCase()\n      .replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n  \n  if (data.last_name) {\n    cleaned.last_name = data.last_name.trim()\n      .toLowerCase()\n      .replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n  \n  // Clean address components\n  if (data.address) {\n    cleaned.address = data.address.trim()\n      .toLowerCase()\n      .replace(/\\b\\w/g, l => l.toUpperCase())\n      .replace(/\\bSt\\b/g, 'Street')\n      .replace(/\\bAve\\b/g, 'Avenue')\n      .replace(/\\bRd\\b/g, 'Road')\n      .replace(/\\bDr\\b/g, 'Drive');\n  }\n  \n  if (data.city) {\n    cleaned.city = data.city.trim()\n      .toLowerCase()\n      .replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n  \n  if (data.state) {\n    cleaned.state = data.state.trim().toUpperCase();\n  }\n  \n  if (data.zip) {\n    const zipClean = data.zip.replace(/\\D/g, '');\n    cleaned.zip = zipClean.length >= 5 ? zipClean.slice(0, 5) : data.zip;\n  }\n  \n  // Calculate completeness score\n  const requiredFields = ['email', 'phone', 'first_name', 'last_name', 'address', 'city', 'state', 'zip'];\n  const completedFields = requiredFields.filter(field => cleaned[field] && cleaned[field] !== null);\n  cleaned.completeness_score = Math.round((completedFields.length / requiredFields.length) * 100);\n  \n  // Copy other fields\n  Object.keys(data).forEach(key => {\n    if (!cleaned.hasOwnProperty(key)) {\n      cleaned[key] = data[key];\n    }\n  });\n  \n  // Add processing metadata\n  cleaned.processed_date = new Date().toISOString();\n  cleaned.data_source = 'nys_motor_vehicle';\n  \n  cleanedItems.push({ json: cleaned });\n}\n\nreturn cleanedItems;"
      },
      "id": "data-cleaning",
      "name": "Data Cleaning Process",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "geographic_filter",
              "leftValue": "={{ $json.state }}",
              "rightValue": "NY,NJ,CT,PA",
              "operator": {
                "type": "string",
                "operation": "contains",
                "singleValue": true
              }
            },
            {
              "id": "completeness_filter",
              "leftValue": "={{ $json.completeness_score }}",
              "rightValue": 70,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "id": "email_filter",
              "leftValue": "={{ $json.email }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "data-filtering",
      "name": "Apply Filtering Criteria",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Additional Business Logic Filtering\nconst items = $input.all();\nconst filteredItems = [];\n\nfor (const item of items) {\n  const data = item.json;\n  let includeRecord = true;\n  \n  // Vehicle type filtering (if vehicle data exists)\n  if (data.vehicle_year) {\n    const currentYear = new Date().getFullYear();\n    const vehicleYear = parseInt(data.vehicle_year);\n    \n    // Filter vehicles older than 20 years\n    if (currentYear - vehicleYear > 20) {\n      includeRecord = false;\n    }\n  }\n  \n  // Registration date filtering (if exists)\n  if (data.registration_date) {\n    const regDate = new Date(data.registration_date);\n    const twoYearsAgo = new Date();\n    twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);\n    \n    // Filter registrations older than 2 years\n    if (regDate < twoYearsAgo) {\n      includeRecord = false;\n    }\n  }\n  \n  // Quality score enhancement\n  let qualityScore = data.completeness_score || 0;\n  \n  // Bonus points for complete contact info\n  if (data.email && data.phone) qualityScore += 10;\n  if (data.address && data.city && data.state && data.zip) qualityScore += 10;\n  \n  // Penalty for suspicious data patterns\n  if (data.phone && data.phone.includes('000-000-0000')) qualityScore -= 20;\n  if (data.email && data.email.includes('noemail')) qualityScore -= 15;\n  \n  data.final_quality_score = Math.min(100, Math.max(0, qualityScore));\n  \n  // Final quality threshold\n  if (data.final_quality_score < 60) {\n    includeRecord = false;\n  }\n  \n  if (includeRecord) {\n    // Add lead source and segmentation\n    data.lead_source = 'NYS Motor Vehicle Records';\n    data.lead_segment = data.final_quality_score >= 85 ? 'High Quality' : \n                       data.final_quality_score >= 70 ? 'Medium Quality' : 'Low Quality';\n    \n    filteredItems.push({ json: data });\n  }\n}\n\nreturn filteredItems;"
      },
      "id": "business-logic-filter",
      "name": "Apply Business Logic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "resource": "contact",
        "operation": "create",
        "properties": {
          "customProperties": [
            {
              "name": "email",
              "value": "={{ $json.email }}"
            },
            {
              "name": "firstname",
              "value": "={{ $json.first_name }}"
            },
            {
              "name": "lastname",
              "value": "={{ $json.last_name }}"
            },
            {
              "name": "phone",
              "value": "={{ $json.phone }}"
            },
            {
              "name": "address",
              "value": "={{ $json.address }}"
            },
            {
              "name": "city",
              "value": "={{ $json.city }}"
            },
            {
              "name": "state",
              "value": "={{ $json.state }}"
            },
            {
              "name": "zip",
              "value": "={{ $json.zip }}"
            },
            {
              "name": "lead_source",
              "value": "={{ $json.lead_source }}"
            },
            {
              "name": "lead_segment",
              "value": "={{ $json.lead_segment }}"
            },
            {
              "name": "quality_score",
              "value": "={{ $json.final_quality_score }}"
            }
          ]
        },
        "options": {
          "batchSize": 100
        }
      },
      "id": "hubspot-upload",
      "name": "Upload to HubSpot",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2,
      "position": [
        2000,
        300
      ],
      "credentials": {
        "hubspotApi": {
          "id": "hubspot-api",
          "name": "HubSpot API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Generate Processing Report\nconst allItems = $input.all();\nconst summary = {\n  processing_date: new Date().toISOString(),\n  workflow_name: 'Data Cleansing Workflow',\n  source_file: $('Google Drive Trigger').first().json.name,\n  \n  // Processing statistics\n  total_records_processed: $('Parse CSV Data').all().length,\n  records_after_cleaning: $('Data Cleaning Process').all().length,\n  records_after_filtering: $('Apply Business Logic').all().length,\n  records_uploaded_to_hubspot: allItems.length,\n  \n  // Quality metrics\n  success_rate: Math.round((allItems.length / $('Parse CSV Data').all().length) * 100),\n  average_quality_score: Math.round(\n    allItems.reduce((sum, item) => sum + (item.json.final_quality_score || 0), 0) / allItems.length\n  ),\n  \n  // Segmentation breakdown\n  high_quality_leads: allItems.filter(item => item.json.lead_segment === 'High Quality').length,\n  medium_quality_leads: allItems.filter(item => item.json.lead_segment === 'Medium Quality').length,\n  low_quality_leads: allItems.filter(item => item.json.lead_segment === 'Low Quality').length,\n  \n  // Geographic distribution\n  states_represented: [...new Set(allItems.map(item => item.json.state))],\n  \n  // Data quality insights\n  records_with_email: allItems.filter(item => item.json.email).length,\n  records_with_phone: allItems.filter(item => item.json.phone).length,\n  records_with_complete_address: allItems.filter(item => \n    item.json.address && item.json.city && item.json.state && item.json.zip\n  ).length,\n  \n  // Processing efficiency\n  processing_start_time: $('Google Drive Trigger').first().json.lastModifiedTime,\n  processing_end_time: new Date().toISOString(),\n  \n  // Recommendations\n  recommendations: [\n    allItems.length < 100 ? 'Consider reviewing data source quality' : null,\n    summary.average_quality_score < 70 ? 'Review filtering criteria to improve lead quality' : null,\n    summary.success_rate < 50 ? 'Check data cleaning algorithms for effectiveness' : null\n  ].filter(Boolean)\n};\n\n// Calculate processing duration\nconst startTime = new Date(summary.processing_start_time);\nconst endTime = new Date(summary.processing_end_time);\nsummary.processing_duration_minutes = Math.round((endTime - startTime) / (1000 * 60));\n\nreturn [{ json: summary }];"
      },
      "id": "generate-report",
      "name": "Generate Processing Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2220,
        300
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@yourdomain.com",
        "toEmail": "admin@yourdomain.com",
        "subject": "Data Cleansing Workflow Complete - {{ $json.source_file }}",
        "emailFormat": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background-color: #4CAF50; color: white; padding: 10px; text-align: center; }\n        .content { padding: 20px; }\n        .metric { margin: 10px 0; padding: 10px; background-color: #f5f5f5; border-radius: 5px; }\n        .success { color: #4CAF50; font-weight: bold; }\n        .warning { color: #FF9800; font-weight: bold; }\n        .error { color: #f44336; font-weight: bold; }\n        .summary-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        .summary-table th, .summary-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        .summary-table th { background-color: #f2f2f2; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🎯 Data Cleansing Workflow Complete</h1>\n    </div>\n    \n    <div class=\"content\">\n        <h2>📊 Processing Summary</h2>\n        <div class=\"metric\">\n            <strong>Source File:</strong> {{ $json.source_file }}<br>\n            <strong>Processing Date:</strong> {{ $json.processing_date }}<br>\n            <strong>Duration:</strong> {{ $json.processing_duration_minutes }} minutes\n        </div>\n        \n        <table class=\"summary-table\">\n            <tr>\n                <th>Metric</th>\n                <th>Value</th>\n                <th>Status</th>\n            </tr>\n            <tr>\n                <td>Total Records Processed</td>\n                <td>{{ $json.total_records_processed }}</td>\n                <td class=\"success\">✅</td>\n            </tr>\n            <tr>\n                <td>Records Uploaded to HubSpot</td>\n                <td>{{ $json.records_uploaded_to_hubspot }}</td>\n                <td class=\"{{ $json.records_uploaded_to_hubspot > 0 ? 'success' : 'warning' }}\">{{ $json.records_uploaded_to_hubspot > 0 ? '✅' : '⚠️' }}</td>\n            </tr>\n            <tr>\n                <td>Success Rate</td>\n                <td>{{ $json.success_rate }}%</td>\n                <td class=\"{{ $json.success_rate >= 70 ? 'success' : $json.success_rate >= 50 ? 'warning' : 'error' }}\">{{ $json.success_rate >= 70 ? '✅' : $json.success_rate >= 50 ? '⚠️' : '❌' }}</td>\n            </tr>\n            <tr>\n                <td>Average Quality Score</td>\n                <td>{{ $json.average_quality_score }}</td>\n                <td class=\"{{ $json.average_quality_score >= 80 ? 'success' : $json.average_quality_score >= 60 ? 'warning' : 'error' }}\">{{ $json.average_quality_score >= 80 ? '✅' : $json.average_quality_score >= 60 ? '⚠️' : '❌' }}</td>\n            </tr>\n        </table>\n        \n        <h3>📈 Lead Segmentation</h3>\n        <div class=\"metric\">\n            <strong>High Quality Leads:</strong> {{ $json.high_quality_leads }} ({{ Math.round(($json.high_quality_leads / $json.records_uploaded_to_hubspot) * 100) }}%)<br>\n            <strong>Medium Quality Leads:</strong> {{ $json.medium_quality_leads }} ({{ Math.round(($json.medium_quality_leads / $json.records_uploaded_to_hubspot) * 100) }}%)<br>\n            <strong>Low Quality Leads:</strong> {{ $json.low_quality_leads }} ({{ Math.round(($json.low_quality_leads / $json.records_uploaded_to_hubspot) * 100) }}%)\n        </div>\n        \n        <h3>🌍 Geographic Coverage</h3>\n        <div class=\"metric\">\n            <strong>States Represented:</strong> {{ $json.states_represented.join(', ') }}<br>\n            <strong>Total States:</strong> {{ $json.states_represented.length }}\n        </div>\n        \n        <h3>📋 Data Quality Insights</h3>\n        <div class=\"metric\">\n            <strong>Records with Email:</strong> {{ $json.records_with_email }} ({{ Math.round(($json.records_with_email / $json.records_uploaded_to_hubspot) * 100) }}%)<br>\n            <strong>Records with Phone:</strong> {{ $json.records_with_phone }} ({{ Math.round(($json.records_with_phone / $json.records_uploaded_to_hubspot) * 100) }}%)<br>\n            <strong>Complete Addresses:</strong> {{ $json.records_with_complete_address }} ({{ Math.round(($json.records_with_complete_address / $json.records_uploaded_to_hubspot) * 100) }}%)\n        </div>\n        \n        {% if $json.recommendations.length > 0 %}\n        <h3>💡 Recommendations</h3>\n        <div class=\"metric warning\">\n            {% for recommendation in $json.recommendations %}\n            • {{ recommendation }}<br>\n            {% endfor %}\n        </div>\n        {% endif %}\n        \n        <div class=\"metric\">\n            <em>This is an automated report from the n8n Data Cleansing Workflow. Please review the HubSpot integration to verify data quality.</em>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "email-notification",
      "name": "Send Report Email",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        2440,
        300
      ],
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP Email"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.error }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "error"
            }
          ]
        },
        "options": {}
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1000,
        500
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@yourdomain.com",
        "toEmail": "admin@yourdomain.com",
        "subject": "🚨 Data Cleansing Workflow Error",
        "emailFormat": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background-color: #f44336; color: white; padding: 10px; text-align: center; }\n        .content { padding: 20px; }\n        .error { background-color: #ffebee; border-left: 5px solid #f44336; padding: 15px; margin: 10px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🚨 Workflow Error Alert</h1>\n    </div>\n    \n    <div class=\"content\">\n        <h2>Error in Data Cleansing Workflow</h2>\n        \n        <div class=\"error\">\n            <strong>Error occurred at:</strong> {{ $now.format('yyyy-MM-dd HH:mm:ss') }}<br>\n            <strong>Workflow:</strong> Data Cleansing Workflow<br>\n            <strong>Node:</strong> {{ $json.node }}<br>\n            <strong>Error Message:</strong> {{ $json.error.message }}<br>\n            <strong>Error Details:</strong> {{ $json.error }}\n        </div>\n        \n        <p><strong>Required Action:</strong> Please check the n8n workflow execution log and resolve the issue.</p>\n        \n        <p><em>This is an automated error notification from the n8n Data Cleansing Workflow.</em></p>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "error-notification",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        1220,
        600
      ],
      "credentials": {
        "smtp": {
          "id": "smtp-credentials",
          "name": "SMTP Email"
        }
      }
    }
  ],
  "connections": {
    "Google Drive Trigger": {
      "main": [
        [
          {
            "node": "Download CSV File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download CSV File": {
      "main": [
        [
          {
            "node": "Parse CSV Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV Data": {
      "main": [
        [
          {
            "node": "Create Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Google Sheet": {
      "main": [
        [
          {
            "node": "Upload Raw Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Raw Data": {
      "main": [
        [
          {
            "node": "Data Cleaning Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Cleaning Process": {
      "main": [
        [
          {
            "node": "Apply Filtering Criteria",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Filtering Criteria": {
      "main": [
        [
          {
            "node": "Apply Business Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apply Business Logic": {
      "main": [
        [
          {
            "node": "Upload to HubSpot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to HubSpot": {
      "main": [
        [
          {
            "node": "Generate Processing Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Processing Report": {
      "main": [
        [
          {
            "node": "Send Report Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [],
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-01-15T10:00:00.000Z",
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "data-cleansing",
      "name": "Data Cleansing"
    }
  ],
  "triggerCount": 1,
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "data-cleansing-workflow",
  "versionId": "1"
} 